Plik index.ts


import {createStore} from "redux";
import {composeWithDevTools} from "redux-devtools-extension";
import {initialStoreState, reducers, StoreState,StoreActionTypes} from "./store";


const store = createStore<StoreState,StoreActionTypes,any,any>
    (reducers,initialStoreState,composeWithDevTools());
export default store;

Plik store.ts



import {combineReducers} from "redux";
import {TodosList, todosListInitialState, todosStoreReducer} from "./actions/reducers/todos.reducer";
import {Actions as TodosActions} from './actions/todos.actions'

export  type StoreActionTypes= TodosActions;

export interface StoreState{
  todos:TodosList;
};

export const initialStoreState:any={
    todos:todosListInitialState,
};
export const reducers=combineReducers<StoreState>({
    todos: todosStoreReducer,
});


Plik todos.action.ts

import {Todo} from "./reducers/todos.reducer";

export enum TodoStoreActions {
    SET_NEW_TODO = 'SET_NEW_TODO',
    SET_TODO_DONE = 'SET_TODO_DONE',
    SET_DELETE_TODO = 'SET_DELETE_TODO',
}

export interface SetNewTodoAction{
    type:TodoStoreActions.SET_NEW_TODO,
    payload:{
        todo:Todo
    }

}

export interface SetTodoDoneAction {
    type: TodoStoreActions.SET_TODO_DONE,
    payload:{
        id:number,
    }
}
export interface SetDeleteTodoAction{
    type:TodoStoreActions.SET_DELETE_TODO,
    payload:{
        todo:Todo
    }
}
export type Actions= SetNewTodoAction | SetTodoDoneAction | SetDeleteTodoAction;
export const todosActions = {
    setNewTodo: (todo: Todo) => ({
        type: TodoStoreActions.SET_NEW_TODO,
        payload: {
            todo
        }
    }),
    setTodoDone:(id:number) :SetTodoDoneAction  => ({
        type: TodoStoreActions.SET_TODO_DONE,
        payload:{id}
    }),
    setDeleteTodo: (todo:Todo): SetDeleteTodoAction =>({
    type: TodoStoreActions.SET_DELETE_TODO,
    payload: { todo },
}),
};

Plik todos.reducer.ts


import {Reducer} from "redux";
import {Actions, TodoStoreActions} from "../todos.actions";


export interface Todo{
    id:number;
    label:string;
    done: boolean;
    description:string;
}

export interface TodosList {
    list:Todo[];
}


export const todosListInitialState: TodosList={
    list:[
        {
            id: -1,
            description: '',
            done: false,
            label: '',
        }
    ]
}

export  const todosStoreReducer:Reducer<TodosList,Actions>=
    (state:TodosList = todosListInitialState,actions:Actions )=> {
    switch (actions.type){
        case TodoStoreActions.SET_NEW_TODO:
            return {
                ...state,
                list:[
                    ...state.list,
                    actions.payload.todo
                ]
            };
        case TodoStoreActions.SET_TODO_DONE:
            const todoToChange = state.list.find(el=>el.id !== actions.payload.id);
            if(todoToChange)
            {
                todoToChange.done=true;
                return {
                    ...state,
                    list:[
                        ...state.list.filter(el=>el.id !== actions.payload.id),
                        todoToChange
                    ]
                }
            }
            return state;
        case TodoStoreActions.SET_DELETE_TODO:
            return {
                ...state,
                list:state.list.filter(el=>el.id !== actions.payload.todo.id)
            };
        default:
            return state;
    }
}
